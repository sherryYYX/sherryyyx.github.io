<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>小王子的博客</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on 小王子的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 20 Aug 2017 21:38:52 +0800</lastBuildDate>
    
        <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>http://localhost:1313/about/</link>
      <pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate>
      
      <guid>http://localhost:1313/about/</guid>
      
        <description>&lt;p&gt;Hugo is a static site engine written in Go.&lt;/p&gt;
&lt;p&gt;It makes use of a variety of open source projects including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/cobra&#34;&gt;Cobra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/viper&#34;&gt;Viper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/jWalterWeatherman&#34;&gt;J Walter Weatherman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/cast&#34;&gt;Cast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Learn more and contribute on &lt;a href=&#34;https://github.com/gohugoio&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Vue 构造选项(一)</title>
      <link>http://localhost:1313/post/21st/</link>
      <pubDate>Tue, 14 Apr 2020 20:38:42 +0800</pubDate>
      
      <guid>http://localhost:1313/post/21st/</guid>
      
        <description>&lt;h2 id=&#34;一vue实例&#34;&gt;一、Vue实例&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/21st_img/21st.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;总结&#34;&gt;总结&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;把 Vue 的实例命名为vm是尤雨溪的习惯，我们应该沿用&lt;/li&gt;
&lt;li&gt;vm 对象封装了对视图的所有操作，包括数据读写、事件绑定、DOM更新&lt;/li&gt;
&lt;li&gt;vm 的构造函数是Vue，按照ES6的说法，vm所属的类是Vue&lt;/li&gt;
&lt;li&gt;option是new Vue的参数，一般称之为选项和构造选项&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;二参数-option-里有什么&#34;&gt;二、参数 option 里有什么&lt;/h2&gt;
&lt;h3 id=&#34;有五类属性&#34;&gt;有五类属性&lt;/h3&gt;
&lt;h4 id=&#34;1-数据dataprops外部属性computedmethodswatch&#34;&gt;1. 数据：data、props(外部属性)、computed、methods、watch&lt;/h4&gt;
&lt;h4 id=&#34;2-domel用模板替换页面哪一块容器&#34;&gt;2. DOM：el（用模板替换页面哪一块，容器）&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;template(html 内容)完整版&lt;/li&gt;
&lt;li&gt;render(渲染) 非完整版&lt;/li&gt;
&lt;li&gt;二选一&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3-生命周期钩子&#34;&gt;3. 生命周期钩子&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;beforeCreate(生之前)、created(生之后)&lt;/li&gt;
&lt;li&gt;beforeMount(挂之前)、mounted(挂之后)&lt;/li&gt;
&lt;li&gt;beforeUpdate(更新之前)、updated(更新之后)&lt;/li&gt;
&lt;li&gt;activated、 deactivated&lt;/li&gt;
&lt;li&gt;beforeDestroy(死之前)、destroyed(死之后)&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;4-资源&#34;&gt;4. 资源&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;directives(指令)&lt;/li&gt;
&lt;li&gt;filters（过滤）&lt;/li&gt;
&lt;li&gt;components(组件)&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;5-组合&#34;&gt;5. 组合&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;1. parent
2. mixins(混入)
3. extends(扩展)
4. provide(提供)
5. inject（注入）
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;三vue组件data为什么必须是函数&#34;&gt;三、vue组件data为什么必须是函数&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;new  Vue({
    el: &#39;#app&#39;,
    template: `&amp;lt;div&amp;gt;{{demo}}&amp;lt;/div&amp;gt;`,
    data: {
        demo: 123
    }
})
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在 new Vue中，data写成对象和函数都可以，再组件中，为什么data一定是函数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const Component = function() {};
Component.prototype.data = {
    demo: 123
}
var component1 = new Component();
var component2 = new Component();
component1.data.demo = 456;
console.log(component2.data.demo); // 456
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;解释&#34;&gt;解释&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;component1&lt;/code&gt;和&lt;code&gt;component2&lt;/code&gt;都引用同一个对象，&lt;code&gt;component1&lt;/code&gt;变成456，那么&lt;code&gt;component2&lt;/code&gt;也变成456。&lt;/li&gt;
&lt;li&gt;组件的实例化，引用同一对象，如果data是对象，一旦修改其中一个组件数据，另一个也跟着变。&lt;/li&gt;
&lt;li&gt;但是如果data是函数，Vue组件的data因为是函数有了作用域，互不干扰。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;四外部属性props&#34;&gt;四、外部属性（props）&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/21st_img/21st_2.png&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;http://localhost:1313/img/21st_img/21st_3.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>浅析 JS 的继承</title>
      <link>http://localhost:1313/post/20st/</link>
      <pubDate>Mon, 13 Apr 2020 23:04:18 +0800</pubDate>
      
      <guid>http://localhost:1313/post/20st/</guid>
      
        <description>&lt;h2 id=&#34;一原型的继承&#34;&gt;一、原型的继承&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;function superType(name){
	this.name = name;
}
superType.prototype.sayName = function(){
	console.log(this.name)
}

function subType(name,age){
        // 继承属性
	superType.call(this,name);
	this.age = age;
}

// 继承方法
subType.prototype = new superType();

subType.prototype.sayAge = function(){
	console.log(this.age)
}

// subType 实例 同时拥有 name，age属性，sayName sayAge方法
var Alias = new subType(&amp;quot;Alias&amp;quot;,18)
Alias.sayName(); // &amp;quot;Alias&amp;quot;
Alias.sayAge()   // 18
}

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;二class-的继承&#34;&gt;二、class 的继承&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;class SuperType {
   // constructor
   constructor(name){
       this.name = name;
   }
   // getter
   get city(){
      return &amp;quot;ShangHai&amp;quot;
   }
   // Methods
   sayName(){
      console.log(this.name)	
   }
}

class SubType extends SuperType{
   constructor(name,age){
      // 继承属性
      super(name);
      this.age = age;
   }
   sayAge(){
      console.log(this.age); 
   }
}
&lt;/code&gt;&lt;/pre&gt;</description>
      
    </item>
    
    <item>
      <title>浅析 Vue 两个版本的区别和使用方法</title>
      <link>http://localhost:1313/post/nineteenth/</link>
      <pubDate>Mon, 13 Apr 2020 17:05:14 +0800</pubDate>
      
      <guid>http://localhost:1313/post/nineteenth/</guid>
      
        <description>&lt;h2 id=&#34;一两个版本对应的文件名&#34;&gt;一、两个版本对应的文件名&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/19st_img/Vue%E4%B8%A4%E7%89%88%E5%8C%BA%E5%88%AB.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;二template-和-render-怎么用&#34;&gt;二、template 和 render 怎么用&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Vue 完整版 &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt;的使用方法，写在 &lt;code&gt;html&lt;/code&gt;页面里或者&lt;code&gt;js&lt;/code&gt;里&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;template&amp;gt;
  &amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt;
  {{n}}
    &amp;lt;button @click=&amp;quot;add&amp;quot;&amp;gt;+1&amp;lt;/button&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;code&gt;render&lt;/code&gt;在非完整版里的使用&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;render(h){ 
     return h(&#39;div&#39;, [this.n,h（&#39;{on:{click:this.add}’,&#39;+1&#39;])
 } //h相当于 creatElement,用h去创建实例
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;还有一种方法：Vue单文件组件
是把&lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt;,·&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;,&lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt;都写在&lt;code&gt;Xxx.vue&lt;/code&gt;文件里，vue-loader 会自动将其转成对象，之后我们在js文件里&lt;code&gt;import&lt;/code&gt;,并且&lt;code&gt; new Vue()&lt;/code&gt; 将其实例化
&lt;pre&gt;&lt;code&gt;new Vue({
     el:&#39;#app&#39;,
     render(h){
      return h(Xxx)
     }
 })
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;建议&#34;&gt;建议&lt;/h4&gt;
&lt;p&gt;使用非完整版，配合Vue-loader,就是Vue单文件组件&lt;/p&gt;
&lt;h5 id=&#34;优点&#34;&gt;优点&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;利于用户体验，用户下载的js文件小，但只支持h函数&lt;/li&gt;
&lt;li&gt;利于开发体验，在vue文件里写html标签，不写h函数&lt;/li&gt;
&lt;li&gt;麻烦事让loader做，vue-loader把vue文件里的html转化为h函数&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;三教读者如何用-codesandboxio-写-vue-代码&#34;&gt;三、教读者如何用 &lt;code&gt;codesandbox.io&lt;/code&gt; 写 Vue 代码&lt;/h2&gt;
&lt;p&gt;进入网站首页 ⇒ 点击create(不要登录) ⇒ 选择Vue ⇒ 自动生成相关文件，直接用&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>webpack</title>
      <link>http://localhost:1313/post/eighteenth/</link>
      <pubDate>Sun, 12 Apr 2020 22:24:01 +0800</pubDate>
      
      <guid>http://localhost:1313/post/eighteenth/</guid>
      
        <description>&lt;h2 id=&#34;webpack&#34;&gt;webpack&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/18st_img/webpack.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;webpack-中的-loader-和-plugin-区别是什么&#34;&gt;webpack 中的 loader 和 plugin 区别是什么？&lt;/h2&gt;
&lt;h4 id=&#34;一&#34;&gt;一、&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;loader 是加载器&lt;/li&gt;
&lt;li&gt;plugin 是插件&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;二用途&#34;&gt;二、用途&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;加载器用来加载文件
例如：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;babel loader&lt;/code&gt;用来加载高级js，将其变成低版本支持的js。&lt;/li&gt;
&lt;li&gt;css loader 是把css 变成页面中的&lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt;标签。&lt;/li&gt;
&lt;li&gt;加载图片，对图片优化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;plugin 插件是扩展功能&lt;br&gt;
例如：
&lt;ul&gt;
&lt;li&gt;插件&lt;code&gt;HtmlWebpackPlugin&lt;/code&gt;，用来生成html文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MiniCssExtractPlugin&lt;/code&gt;, 用来抽取css代码，变成文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;懒加载&#34;&gt;懒加载&lt;/h2&gt;
&lt;p&gt;如何懒加载呢？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;button.onclick = () =&amp;gt; {
    const promise = import(&#39;./lazy&#39;)
    promise.then((module) =&amp;gt; {
        const fn = module.default
        fn()
    }, () =&amp;gt; {
        console.log(&#39;模块加载错误&#39;)
    })
}
//用 import() 加载文件，然后得到一个 promise.then(成功,失败)
&lt;/code&gt;&lt;/pre&gt;</description>
      
    </item>
    
    <item>
      <title>闭包</title>
      <link>http://localhost:1313/post/seventeenh/</link>
      <pubDate>Sat, 11 Apr 2020 23:03:08 +0800</pubDate>
      
      <guid>http://localhost:1313/post/seventeenh/</guid>
      
        <description>&lt;h2 id=&#34;一闭包是一个函数用到了外部变量那么函数变量就是闭包&#34;&gt;一、闭包是：一个函数用到了外部变量，那么函数+变量就是闭包。&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;function f1() {
    let a = 1;
    function f2() {
        console.log(a)
    }
    f2()
}
f1() //其中的变量a和函数f2就是闭包
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;二闭包的用途是什么&#34;&gt;二、闭包的用途是什么？&lt;/h2&gt;
&lt;p&gt;闭包是因为javaScript的作用域而产生的,我们在使用一个函数时，正好需要函数外面的变量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在顶级作用域里声明的变量就是全局变量&lt;/li&gt;
&lt;li&gt;其他的是局部变量
由于js函数内部可以使用外部的变量，所以就是闭包&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;三闭包的缺点是什么&#34;&gt;三、闭包的缺点是什么？&lt;/h2&gt;
&lt;p&gt;因为IE有bug，IE在我们用完闭包后，依旧不能将闭包里的变量收回
如果是面试的话，要回答闭包容易内存泄露。
注意，虽然闭包并不会造成内存泄露，真实原因是 JS 引擎的实现有问题，但网上已经以讹传讹了。
所以面试时我们依然要答出这一点。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>浅析 MVC</title>
      <link>http://localhost:1313/post/sixteenth/</link>
      <pubDate>Sat, 11 Apr 2020 16:31:55 +0800</pubDate>
      
      <guid>http://localhost:1313/post/sixteenth/</guid>
      
        <description>&lt;h2 id=&#34;1-mvc-三个对象分别做什么&#34;&gt;1. MVC 三个对象分别做什么&lt;/h2&gt;
&lt;h4 id=&#34;每个模块都可以写成三个对象分别是&#34;&gt;每个模块都可以写成三个对象，分别是&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;M —— Model 数据类型 负责操作所有数据&lt;/li&gt;
&lt;li&gt;V —— View 视图 负责所有UI界面&lt;/li&gt;
&lt;li&gt;C —— Controller 控制器 负责其他&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;代码示例&#34;&gt;代码示例&lt;/h4&gt;
&lt;p&gt;将代码重构成mvc模式&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 数据相关都放到m
const m = {
  data: {},
  create() {},
  delete() {},
  update() {},
  get() {}
}

// 视图相关都放到v
const v = {
  el: null,
  html: ``, //放html
  init() {}, //初始化
  render() {} //渲染
}

// 其他操作、方法都放c
const c = {
  init() {},
  events: {},
  add() {},
  minus() {},
  mul() {},
  div() {},
  autoBindEvents() {}
}

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;2-eventbus-有哪些-api是做什么用的给出伪代码示例&#34;&gt;2. EventBus 有哪些 API，是做什么用的，给出伪代码示例&lt;/h2&gt;
&lt;h4 id=&#34;常用api&#34;&gt;常用API&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;on&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;trigger()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;off&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;具体用法&#34;&gt;具体用法&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;EventBus.on()&lt;/code&gt; 绑定事件&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt; eventBus.on(&#39;eventName&#39;,fn)
 //事件名，回调函数
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;code&gt;EventBus.trigger&lt;/code&gt; 触发事件&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;eventBus.trigger(&#39;eventName&#39;,data)
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;code&gt;eventBus.off&lt;/code&gt; 解绑事件&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;eventBus.off(&#39;eventName&#39;,fn)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;3-表驱动编程&#34;&gt;3. 表驱动编程&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;表驱动法就是将要不断`if else`的代码做成哈希表，结构简单明了。
让代码稳定性高，更易修改维护
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;//不用表编程
if(key===1){
    add1()
}
else if(key===2){
    add2()
}
else if(key===3){
    add3()
}
else if(key===4){
    add4()
}else{
    add5()
}

//使用表编程
const events = {
    1: add1()
    2: add2()
    3: add3()
    4: add4()
    5: add5() 
}
events[key]()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;优点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;减少代码重复&lt;/li&gt;
&lt;li&gt;降低复杂度，结构明晰&lt;/li&gt;
&lt;li&gt;提高代码可读性&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;我是如何理解模块化的&#34;&gt;我是如何理解模块化的&lt;/h2&gt;
&lt;h4 id=&#34;优点&#34;&gt;优点&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;分层，结构清晰&lt;/li&gt;
&lt;li&gt;降低了每个模块耦合度&lt;/li&gt;
&lt;li&gt;多人合作互不干扰
开发人员分工明确，提高开高效率，降低维护成本。&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>jQuery 的功能</title>
      <link>http://localhost:1313/post/fourteenth/</link>
      <pubDate>Sat, 28 Mar 2020 19:13:11 +0800</pubDate>
      
      <guid>http://localhost:1313/post/fourteenth/</guid>
      
        <description>&lt;h2 id=&#34;一jquery-如何获取元素&#34;&gt;一、jQuery 如何获取元素&lt;/h2&gt;
&lt;p&gt;jQuery的第一步，就是将选择表达式，放进构造函数jQuery()(简写为$)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$(document)&lt;/code&gt;//选择整个文档对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$(&#39;#myId&#39;)&lt;/code&gt;//选择ID为myId的网页元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$(&#39;.myClass&#39;)&lt;/code&gt;//选择class为myClass的div元素&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;二jquery-的链式操作是怎样的&#34;&gt;二、jQuery 的链式操作是怎样的&lt;/h2&gt;
&lt;p&gt;选择网页元素后，可以对它进行操作，把一系列操作连在一起，以链条的形式写出。每次操作返回的是jQuery对象
&lt;code&gt;$(&#39;div&#39;).find(&#39;h3&#39;).eq(2).html(&#39;hello&#39;);&lt;/code&gt;
意思是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;找到div元素，&lt;/li&gt;
&lt;li&gt;找到里面的h3元素&lt;/li&gt;
&lt;li&gt;选择第三个h3元素&lt;/li&gt;
&lt;li&gt;把里面的内容改为hello&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;三jquery-如何创建元素&#34;&gt;三、jQuery 如何创建元素&lt;/h2&gt;
&lt;p&gt;把要创造的元素放入&lt;code&gt;jQuery()&lt;/code&gt;中即可
例如：
&lt;code&gt;$(&#39;&amp;lt;p&amp;gt;Hello&amp;lt;/p&amp;gt;&#39;);&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;四jquery-如何移动元素&#34;&gt;四、jQuery 如何移动元素&lt;/h2&gt;
&lt;p&gt;提供了两种方法操作元素在网页中移动&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;直接移动该元素
&lt;code&gt;$(&#39;div&#39;).insertAfter(&#39;p&#39;)&lt;/code&gt;//把div元素移到p元素后面，返回div&lt;/li&gt;
&lt;li&gt;移动其他元素
&lt;code&gt;$(&#39;p&#39;).after($(&#39;div&#39;))&lt;/code&gt;//把p元素移到div的前面，返回p&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;总结：最后效果是一样的， 但是返回的元素不一样。&lt;/li&gt;
&lt;li&gt;这种模式操作方法，一共四对：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;`.insertAfter()和.after()`在现存元素的外部，从后面插入元素
`.insertBefore()和.before()`在现存元素的外部，从前面插入元素
`.appendTo()和.append()`在现存元素的内部，从后面插入元素
`.prependTo()和.prepend()`在现存元素的内部，从前面插入元素

&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;五jquery-如何修改元素的属性&#34;&gt;五、jQuery 如何修改元素的属性&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;复制元素 &lt;code&gt;.clone()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;删除元素 &lt;code&gt;.remove()&lt;/code&gt;和&lt;code&gt;.detach()&lt;/code&gt;,前者不保留被删除元素，后者保留。&lt;/li&gt;
&lt;li&gt;清空元素内容 &lt;code&gt;.empty()&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;六jquery-如何给元素取值和赋值&#34;&gt;六、jQuery 如何给元素取值和赋值&lt;/h2&gt;
&lt;p&gt;用同一个函数，完成取值（getter）和赋值（setter）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$(&#39;.test&#39;).html();&lt;/code&gt;//html()没有参数，表示取出h1的值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$(&#39;.test&#39;).html(&#39;hello&#39;);&lt;/code&gt;//有参数hello，表示给class为test的元素赋值&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;参考阮一峰的博客&#34;&gt;参考阮一峰的博客&lt;/h5&gt;
</description>
      
    </item>
    
    <item>
      <title>* HTML 总结</title>
      <link>http://localhost:1313/post/thirteenth/</link>
      <pubDate>Sun, 22 Mar 2020 16:44:11 +0800</pubDate>
      
      <guid>http://localhost:1313/post/thirteenth/</guid>
      
        <description>&lt;h2 id=&#34;canvas&#34;&gt;canvas&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;const canvas = document.getElementById(&#39;canvas&#39;); //获取canvas的引用
const ctx = canvas.getContext(&#39;2d&#39;); //获取canvas 2d 上下文

ctx.fillStyle = &#39;green&#39;; // 设置画笔颜色
ctx.fillRect(10, 10, 150, 100); //设置画笔范围（坐标，宽高）
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;video&#34;&gt;video&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!-- Simple video example --&amp;gt;
&amp;lt;video src=&amp;quot;videofile.ogg&amp;quot; autoplay poster=&amp;quot;posterimage.jpg&amp;quot;&amp;gt; 
//视频来源， 自动播放 设置封面
  抱歉，您的浏览器不支持内嵌视频，不过不用担心，你可以 &amp;lt;a href=&amp;quot;videofile.ogg&amp;quot;&amp;gt;下载&amp;lt;/a&amp;gt;
  并用你喜欢的播放器观看!
&amp;lt;/video&amp;gt;

&amp;lt;!-- Video with subtitles --&amp;gt;
&amp;lt;video src=&amp;quot;foo.ogg&amp;quot;&amp;gt;
  &amp;lt;track kind=&amp;quot;subtitles&amp;quot; src=&amp;quot;foo.en.vtt&amp;quot; srclang=&amp;quot;en&amp;quot; label=&amp;quot;English&amp;quot;&amp;gt;//加字幕
  &amp;lt;track kind=&amp;quot;subtitles&amp;quot; src=&amp;quot;foo.sv.vtt&amp;quot; srclang=&amp;quot;sv&amp;quot; label=&amp;quot;Svenska&amp;quot;&amp;gt;
&amp;lt;/video&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;题目&#34;&gt;题目&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;HTML5标签
内容：header main footer article p
功能：canvas video audio&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;必考：你是如何理解 HTML 语义化的？
举例法
HTML 语义化就是使用正确的标签（总结）段落就写 p 标签，标题就写 h1 标签，文章就写article标签，视频就写video标签，等等。
阐述法
首先讲以前的后台开发人员使用table布局，然后讲美工人员使用div+css布局，最后讲专业的前端会使用正确的标签进行页面开发。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;meta viewport 是做什么用的，怎么写？
举例法
&lt;code&gt;&amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1&amp;quot;&amp;gt;&lt;/code&gt;
然后逐个解释每个单词的意思。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你用过哪些 HTML 5 标签？
内容：header main footer article p
功能：canvas video audio&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;H5 是什么？
搜一下知乎就知道了，H5表示移动端页面，反正不是HTML5。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>JS 函数的执行时机</title>
      <link>http://localhost:1313/post/twelfth/</link>
      <pubDate>Fri, 20 Mar 2020 20:17:59 +0800</pubDate>
      
      <guid>http://localhost:1313/post/twelfth/</guid>
      
        <description>&lt;pre&gt;&lt;code&gt;let i = 0
for(i = 0; i&amp;lt;6; i++){
  setTimeout(()=&amp;gt;{
    console.log(i)
  },0)
}
//打印出6个6
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;解释&#34;&gt;解释&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;i是全局变量&lt;/li&gt;
&lt;li&gt;for循环遍历i&lt;/li&gt;
&lt;li&gt;而每次循环里都有setTimeout()&lt;/li&gt;
&lt;li&gt;setTimeout()里的函数会在for循环结束后再执行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;i = 6&lt;/code&gt;时，循环结束，一起打印6个6&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-写出让上面代码打印-012345-的方法&#34;&gt;2 写出让上面代码打印 0、1、2、3、4、5 的方法&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;for(let i = 0; i &amp;lt; 6; i++){
    setTimeout (() =&amp;gt; {console.log(i)},0)
}//打印 0,1,2,3,4,5
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;3-除了-for-let-配合其他方法&#34;&gt;3 除了 for let 配合，其他方法&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;let i
for(i = 0; i &amp;lt; 6; i++){
   !function(j){
    setTimeout(()=&amp;gt;{
     console.log(j)
    },0)
   }(i)
}
//打印 0,1,2,3,4,5
&lt;/code&gt;&lt;/pre&gt;</description>
      
    </item>
    
    <item>
      <title>JS 对象基本用法</title>
      <link>http://localhost:1313/post/11st/</link>
      <pubDate>Tue, 17 Mar 2020 19:36:03 +0800</pubDate>
      
      <guid>http://localhost:1313/post/11st/</guid>
      
        <description>&lt;h2 id=&#34;javascript-对象object&#34;&gt;JavaScript 对象（Object）&lt;/h2&gt;
&lt;h3 id=&#34;写法&#34;&gt;写法&lt;/h3&gt;
&lt;p&gt;简单写法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let obj = {
        &amp;quot;name&amp;quot;:&amp;quot;frank&amp;quot;,&amp;quot;age&amp;quot;:18 
}
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;
let obj = new Object({&amp;quot;name&amp;quot;:&amp;quot;frank&amp;quot;}) //正规写法
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;注意&#34;&gt;注意&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;键名是字符串，不是标识符，可以包含任意字符&lt;/li&gt;
&lt;li&gt;数字的时候，引号可省&lt;/li&gt;
&lt;li&gt;就算引号省略，键名还是字符串（重要）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;属性名&#34;&gt;属性名&lt;/h2&gt;
&lt;p&gt;每个key都是对象的属性名（property）&lt;/p&gt;
&lt;h3 id=&#34;变量做属性名&#34;&gt;变量做属性名&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/11st_ing/1.png&#34; alt=&#34;ing&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;注意-1&#34;&gt;注意&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;不加[]的属性名会自动变为字符串&lt;/li&gt;
&lt;li&gt;加了[]会当作变量求值&lt;/li&gt;
&lt;li&gt;值如果不是字符串，会自动变成字符串&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;如何删除对象的属性&#34;&gt;如何删除对象的属性&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;delete obj.xxx&lt;/code&gt;或者 &lt;code&gt;delete obj[xxx]&lt;/code&gt;
可以删除obj的xxx属性&lt;/li&gt;
&lt;li&gt;查看一个属性名是否在对象
&lt;code&gt;&#39;xxx&#39; in obj === false&lt;/code&gt;obj对象里没有xxx属性&lt;/li&gt;
&lt;li&gt;有属性名，但是值为undefined
&lt;code&gt;&amp;quot;xxx&amp;quot; in obj &amp;amp;&amp;amp; obj.xxx === undefined&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;obj.xxx === undefined&lt;/code&gt;
不能判断xxx是否为obj的属性，只能判断属性值&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;如何查看对象的属性读属性&#34;&gt;如何查看对象的属性（读属性）&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;查看自身所有属性
&lt;code&gt;Object.keys(obj)&lt;/code&gt;
查看属性值：&lt;code&gt;Object.values(obj)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查看自身+共有属性
&lt;code&gt;console.dir(obj)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;判断一个属性是自身的还是共有的
&lt;code&gt;obj.hasOwnProperty(&amp;quot;toString&amp;quot;)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;如何查看对象的属性&#34;&gt;如何查看对象的属性&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;两种方法
&lt;ol&gt;
&lt;li&gt;中括号法：&lt;code&gt;obj[&amp;quot;key&amp;quot;]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;点语法：&lt;code&gt;obj.key&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;注意-2&#34;&gt;注意&lt;/h3&gt;
&lt;p&gt;请使用第一种中括号法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;obj.name&lt;/code&gt;等价于&lt;code&gt;obj[&amp;quot;name&amp;quot;]&lt;/code&gt;这里name是字符串，不是变量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;obj.name&lt;/code&gt;不等于&lt;code&gt;obj[name]&lt;/code&gt;中括号里那么是变量&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;修改或增加对象的属性&#34;&gt;修改或增加对象的属性&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;直接赋值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;let obj = {name:&amp;quot;frank&amp;quot;}&lt;/code&gt;//name是字符串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;obj.name = &amp;quot;frank&amp;quot;&lt;/code&gt;//name 是字符串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;obj[&amp;quot;name&amp;quot;] = &amp;quot;frank&amp;quot; &lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;批量赋值
&lt;code&gt;Object.assign(obj, {age: 19, gender: &amp;quot;man&amp;quot;})&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;name-in-obj和objhasownpropertyname-的区别&#34;&gt;&amp;lsquo;name&amp;rsquo; in obj和obj.hasOwnProperty(&amp;lsquo;name&amp;rsquo;) 的区别&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&#39;name&#39; in obj&lt;/code&gt;:属性名name是否在obj对象里&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;obj.hasOwnProperty(&#39;name&#39;)&lt;/code&gt;
判断属性name是obj对象自身的还是共有的&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>JS 的基本语法</title>
      <link>http://localhost:1313/post/tenth/</link>
      <pubDate>Mon, 16 Mar 2020 19:45:21 +0800</pubDate>
      
      <guid>http://localhost:1313/post/tenth/</guid>
      
        <description>&lt;h2 id=&#34;1表达式和语句&#34;&gt;1.表达式和语句&lt;/h2&gt;
&lt;h3 id=&#34;表达式&#34;&gt;表达式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 + 2 &lt;/code&gt;表达式的值为3&lt;/li&gt;
&lt;li&gt;&lt;code&gt;add(1,2)&lt;/code&gt;表达式的值为函数的返回值
&lt;img src=&#34;http://localhost:1313/img/tenth_img/2.png&#34; alt=&#34;img&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;语句&#34;&gt;语句&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;var a = 1&lt;/code&gt;是一个语句&lt;/p&gt;
&lt;h3 id=&#34;区别&#34;&gt;区别&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;表达式一般有值，语句可能有可能无&lt;/li&gt;
&lt;li&gt;语句一般会改变环境（声明、赋值）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;大小写敏感一定注意&#34;&gt;大小写敏感，一定注意&lt;/h3&gt;
&lt;h3 id=&#34;空格&#34;&gt;空格&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;大部分空格无意义&lt;/li&gt;
&lt;li&gt;⚠️return后不能加回车&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2标识符用来命名&#34;&gt;2.标识符（用来命名）&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;var a = 1;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一个字符可用unicode字母或_或$或中文&lt;/li&gt;
&lt;li&gt;后面的字符，除了上面的，还可以数字&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;区块block&#34;&gt;区块（block）&lt;/h3&gt;
&lt;p&gt;把代码包在一起&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    {
        let a = 1
        let b = 2 
    }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;常与if/for/while一起用&lt;/p&gt;
&lt;h2 id=&#34;if-else-语句&#34;&gt;if else 语句&lt;/h2&gt;
&lt;h3 id=&#34;语法&#34;&gt;语法&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;if(表达式){
    语句1
}else{
    语句2
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;变态情况&#34;&gt;变态情况&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;表达式变态：错误：&lt;code&gt;a=1&lt;/code&gt;正确：&lt;code&gt;a ==== 1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;语句1变态：嵌套if else&lt;/li&gt;
&lt;li&gt;语句2变态：同上&lt;/li&gt;
&lt;li&gt;缩进变态：&lt;img src=&#34;http://localhost:1313/img/tenth_img/3.png&#34; alt=&#34;img&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;使用没有歧义的写法&#34;&gt;使用没有歧义的写法&lt;/h3&gt;
&lt;h3 id=&#34;switch-语句&#34;&gt;switch 语句&lt;/h3&gt;
&lt;h4 id=&#34;语法-1&#34;&gt;语法&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;switch(fruit){
    case&amp;quot;banana&amp;quot;:
    //...
    break;
    case&amp;quot;apple&amp;quot;:
    //...
    break;
    default:
    //...
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;省略break会有问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;问好冒号表达式&#34;&gt;问好冒号表达式&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;A ？B : c&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;while循环当时&#34;&gt;while循环（当&amp;hellip;时）&lt;/h2&gt;
&lt;h3 id=&#34;语法-2&#34;&gt;语法&lt;/h3&gt;
&lt;p&gt;while（表达式）{
语句
}&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;判断表达式为真，执行语句，执行完再判断；为假，结束&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;变态&#34;&gt;变态&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/tenth_img/4.png&#34; alt=&#34;img&#34;&gt;
这是死循环，因为浮点数不精确，永远不会等于1&lt;/p&gt;
&lt;h2 id=&#34;for循环&#34;&gt;for循环&lt;/h2&gt;
&lt;p&gt;是while循环的方便写法&lt;/p&gt;
&lt;h3 id=&#34;语法-3&#34;&gt;语法&lt;/h3&gt;
&lt;p&gt;for(语句1；表达式2；语句3){
循环体
}&lt;/p&gt;
&lt;h3 id=&#34;变态-1&#34;&gt;变态&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/tenth_img/5.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/tenth_img/6.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先执行语句1，然后判断表达式2，如果为真，执行循环体，然后执行语句3；如果为假，直接退出循环。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;break-和-continue&#34;&gt;break 和 continue&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;break：退出所有循环&lt;/li&gt;
&lt;li&gt;continue： 退出当前一次循环&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;label语句&#34;&gt;label语句&lt;/h2&gt;
&lt;p&gt;面试：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{ 
    foo:1
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;就是一个标签，是1&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>JavaScript 的诞生</title>
      <link>http://localhost:1313/post/ninth/</link>
      <pubDate>Sat, 14 Mar 2020 23:07:56 +0800</pubDate>
      
      <guid>http://localhost:1313/post/ninth/</guid>
      
        <description>&lt;h1 id=&#34;布兰登艾--javascript之父&#34;&gt;布兰登艾  JavaScript之父&lt;/h1&gt;
&lt;h2 id=&#34;1&#34;&gt;1.&lt;/h2&gt;
&lt;p&gt;1995年布兰登为了应付网景公司交给他的任务，这项任务就是，公司急需一种网页脚本语言，让浏览器可以与网页互动，并且要与java有相似之处。&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;
于是布兰登仅用了10天时间写了这门语言。&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;借鉴了C语言基本语法；&lt;/li&gt;
&lt;li&gt;借鉴Java语言的数据类型及内存管理&lt;/li&gt;
&lt;li&gt;借鉴Scheme语言，将函数提升到first&lt;/li&gt;
&lt;li&gt;借鉴Self语言，继承机制&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2&#34;&gt;2.&lt;/h2&gt;
&lt;p&gt;javaScript顺应时代，成为互联网第一大语言，生命力顽强。&lt;/p&gt;
&lt;h2 id=&#34;3缺陷&#34;&gt;3.缺陷&lt;/h2&gt;
&lt;p&gt;但是，由于这门语言是设计者仓促完成用来应付公司的需求，所以它的出身就有问题，先天不足，设计有缺陷。&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;
并且在设计出来后不久，由于要与IE大战，很快就申请了标准，没有调整，种种历史原因，使得JavaScript存在缺陷。&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;
本文借鉴来源：阮一峰的博客&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>浅析 URL</title>
      <link>http://localhost:1313/post/eighth/</link>
      <pubDate>Sat, 14 Mar 2020 09:57:23 +0800</pubDate>
      
      <guid>http://localhost:1313/post/eighth/</guid>
      
        <description>&lt;h1 id=&#34;www--url--http--html&#34;&gt;www = URL + HTTP + HTML&lt;/h1&gt;
&lt;h3 id=&#34;ipinternet-protocol网络协议&#34;&gt;IP（Internet Protocol）网络协议&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;定位一台设备&lt;/li&gt;
&lt;li&gt;特殊的IP
127.0.0.1 表示自己
localhost 通过host指定自己&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;端口port&#34;&gt;端口（port）&lt;/h3&gt;
&lt;p&gt;提供HTTP服务 用80端口
HTTPS    443端口&lt;/p&gt;
&lt;h2 id=&#34;url&#34;&gt;URL&lt;/h2&gt;
&lt;p&gt;URL= 协议+域名+路径+查询参数+锚点
&lt;a href=&#34;https://www.baidu.com/s?wd=hello&amp;amp;rsv-spt=1#5&#34;&gt;https://www.baidu.com/s?wd=hello&amp;amp;rsv-spt=1#5&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;1协议-https&#34;&gt;1.协议 https://&lt;/h3&gt;
&lt;p&gt;HyperText Transfer Protocol Secure(超文本传输安全协议)&lt;/p&gt;
&lt;h3 id=&#34;2域名-wwwbaiducom&#34;&gt;2.域名 &lt;a href=&#34;http://www.baidu.com&#34;&gt;www.baidu.com&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;域名是对IP对别称
百度对应什么域名：&lt;code&gt;ping baidu.com&lt;/code&gt;
&lt;a href=&#34;http://www.xiedaima.com&#34;&gt;www.xiedaima.com&lt;/a&gt; 和xiedaima.com不是同一个域名，他们是父子关系&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;com是顶级域名&lt;/li&gt;
&lt;li&gt;xiedaimala.com是二级域名（俗称：一级域名）&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.xiedaima.com&#34;&gt;www.xiedaima.com&lt;/a&gt;是三级域名&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3路径-s&#34;&gt;3.路径 /s&lt;/h3&gt;
&lt;p&gt;请求不同对页面&lt;/p&gt;
&lt;h3 id=&#34;4查询参数-wdhellorsv-spt1&#34;&gt;4.查询参数 ?wd=hello&amp;amp;rsv-spt=1&lt;/h3&gt;
&lt;p&gt;同一页面，不同内容&lt;/p&gt;
&lt;h3 id=&#34;5锚点-5&#34;&gt;5.锚点 #5&lt;/h3&gt;
&lt;p&gt;同一内容，不同位置&lt;/p&gt;
&lt;h2 id=&#34;dns-domain-name-system域名系统&#34;&gt;DNS （Domain Name System）域名系统&lt;/h2&gt;
&lt;p&gt;域名和IP是通过DNS对应起来
&lt;code&gt;nslookup baidu.com&lt;/code&gt;域名寻找&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>CSS 知识总结</title>
      <link>http://localhost:1313/post/seventh/</link>
      <pubDate>Fri, 13 Mar 2020 17:23:51 +0800</pubDate>
      
      <guid>http://localhost:1313/post/seventh/</guid>
      
        <description>&lt;h1 id=&#34;css布局&#34;&gt;css布局&lt;/h1&gt;
&lt;h2 id=&#34;1float布局&#34;&gt;1.float布局&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;子元素上加 &lt;code&gt;float:left和width&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在父元素上加&lt;code&gt;.clearfix&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;    .clearfix::after{
        content:&#39;&#39;;
        display:block;
        clear:both;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;注意&#34;&gt;注意&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;float要自己计算宽度，不灵活&lt;/li&gt;
&lt;li&gt;float在IE6/7有双倍margin bug，加&lt;code&gt;display: inline-block;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;用于IE足矣&lt;/li&gt;
&lt;li&gt;float平面布局，要用&lt;code&gt;-margin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;居中：
&lt;pre&gt;&lt;code&gt;    margin-left:auto;
    margin-right:auto;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2flex布局&#34;&gt;2.flex布局&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;让一个元素变成flex容器
&lt;pre&gt;&lt;code&gt;    .comtainer{
        display: flex;
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;改变流动方向
flex-direction:row / column&lt;/li&gt;
&lt;li&gt;控制折行
flex-wrap: wrap&lt;/li&gt;
&lt;li&gt;横轴对齐（主轴）
just-content: center/space-between&lt;/li&gt;
&lt;li&gt;纵轴对齐（次轴）
align-items: center&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;注意-1&#34;&gt;注意&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;flex用于平局布局，也用负数margin&lt;/li&gt;
&lt;li&gt;不要写死width和height,可以用min-width/max-width/min-height/&lt;/li&gt;
&lt;li&gt;flex可以满足所有需求&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;grid布局&#34;&gt;grid布局&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;    container{
        grid-template-columns: 40px 50px auto 50px 40px;
        grid-template-rows: 25% 100px auto;
    }
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;注意-2&#34;&gt;注意&lt;/h4&gt;
&lt;p&gt;Grid适合不规则的布局&lt;/p&gt;
&lt;h1 id=&#34;css定位&#34;&gt;css定位&lt;/h1&gt;
&lt;h2 id=&#34;position&#34;&gt;position&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;static 默认值，在文档流里&lt;/li&gt;
&lt;li&gt;relative相对定位，升起来，但不脱离文档流&lt;/li&gt;
&lt;li&gt;absolute 绝对定位，定位基准是祖先里的非static&lt;/li&gt;
&lt;li&gt;fixed 固定定位，定位基准是viewpoint（有诈）&lt;/li&gt;
&lt;li&gt;sticky粘滞定位 （少用）&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;注意-3&#34;&gt;注意&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;写了absolute，补一个(爸爸)relative&lt;/li&gt;
&lt;li&gt;写了absolute和fixed，补上top和left&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;css动画&#34;&gt;css动画&lt;/h1&gt;
&lt;h2 id=&#34;浏览器渲染过程&#34;&gt;浏览器渲染过程&lt;/h2&gt;
&lt;p&gt;步骤&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;根据HTML构建HTML树（DOM）&lt;/li&gt;
&lt;li&gt;根据css构建css树（CSSOM）&lt;/li&gt;
&lt;li&gt;将两颗树合并成一颗渲染树（render tree）&lt;/li&gt;
&lt;li&gt;Layout布局（文档流、盒子模型、位置大小）&lt;/li&gt;
&lt;li&gt;paint绘制（边框、颜色）&lt;/li&gt;
&lt;li&gt;compose合成（根据曾姐关系展示）&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;transform变形&#34;&gt;transform（变形）&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;translate 位移&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;transform: translateX(50px);
transform: translate3d(x,y,z);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;translate(-50%,-50%)可以绝对定位元素居中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;scale 缩放
scale(numX,numY)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;rotate 旋转
rotate(45deg);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;skew 倾斜
skewX(45deg);&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;注意-4&#34;&gt;注意&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;一般需要transition过渡&lt;/li&gt;
&lt;li&gt;inline元素不支持transform，需要变成block&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;transition过渡&#34;&gt;transition过渡&lt;/h2&gt;
&lt;p&gt;用于补充中间帧
transition：属性名 时长 过渡方式 延迟&lt;/p&gt;
&lt;h2 id=&#34;animation&#34;&gt;animation&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;.demo.start{
    animation:xxx 1s
}

@keyframes xxx{
    0%{
        transform:none;
    }
    60%{
        transform:translateX(200px);
    }
    100%{
        transform:translateX(200x) translateY(100px);
    }
}
&lt;/code&gt;&lt;/pre&gt;</description>
      
    </item>
    
    <item>
      <title>简述 CSS 盒模型是什么</title>
      <link>http://localhost:1313/post/sixth/</link>
      <pubDate>Wed, 11 Mar 2020 20:43:16 +0800</pubDate>
      
      <guid>http://localhost:1313/post/sixth/</guid>
      
        <description>&lt;h2 id=&#34;简述-css-盒模型是什么&#34;&gt;简述 CSS 盒模型是什么&lt;/h2&gt;
&lt;h3 id=&#34;css盒模型分为两种&#34;&gt;css盒模型分为两种&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;content box&lt;/li&gt;
&lt;li&gt;boder box&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一个盒子由四部分组成&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;content 内容&lt;/li&gt;
&lt;li&gt;padding 内边距&lt;/li&gt;
&lt;li&gt;boder    边框&lt;/li&gt;
&lt;li&gt;margin   外边距&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/1.png&#34; alt=&#34;两种盒模型&#34;&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>HTML常用标签</title>
      <link>http://localhost:1313/post/fifth/</link>
      <pubDate>Tue, 10 Mar 2020 20:08:39 +0800</pubDate>
      
      <guid>http://localhost:1313/post/fifth/</guid>
      
        <description>&lt;h2 id=&#34;a-标签的用法&#34;&gt;a 标签的用法&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;//google.com&amp;quot;&amp;gt;超链接&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;属性&#34;&gt;属性&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;href&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;取值有网址、路径、伪协议&lt;/li&gt;
&lt;li&gt;作用 跳到外部连接、内部锚点、邮箱电话&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;target&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt;  target=&amp;quot;_nblank&amp;quot; 在空白页打开
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt; target=&amp;quot;_top&amp;quot; 在顶级窗口打开
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt; target=&amp;quot;_parent&amp;quot; 在当前界面iframe的上一层打开
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code&gt; target=&amp;quot;_self&amp;quot; 在自己页面
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;img-标签的用法&#34;&gt;img 标签的用法&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;    &amp;lt;img src=&amp;quot;dog.jpg&amp;quot; alt=&amp;quot;狗&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;发出get请求，展示图片&lt;/p&gt;
&lt;h3 id=&#34;属性-1&#34;&gt;属性&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;alt：aternative 替换 当图片无法加载时，用于补救。&lt;/li&gt;
&lt;li&gt;width/height：图片宽高&lt;/li&gt;
&lt;li&gt;src：source 图片地址来源&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;table-标签的用法&#34;&gt;table 标签的用法&lt;/h2&gt;
&lt;p&gt;分为三部分：&lt;code&gt;&amp;lt;thead&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;tbody&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;tfoot&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    &amp;lt;table&amp;gt;
        &amp;lt;thead&amp;gt;
            &amp;lt;tr&amp;gt;
                &amp;lt;th&amp;gt;表头&amp;lt;/th&amp;gt;
                &amp;lt;th&amp;gt;表头&amp;lt;/th&amp;gt;
                &amp;lt;th&amp;gt;表头&amp;lt;/th&amp;gt;
            &amp;lt;/tr&amp;gt;
        &amp;lt;/thead&amp;gt;
        &amp;lt;tbody&amp;gt;
            &amp;lt;tr&amp;gt;
                &amp;lt;td&amp;gt;内容&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;内容&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;内容&amp;lt;/td&amp;gt;
            &amp;lt;/tr&amp;gt;
        &amp;lt;/tbody&amp;gt;
        &amp;lt;tfoot&amp;gt;
            &amp;lt;tr&amp;gt;
                &amp;lt;td&amp;gt;内容&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;内容&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;内容&amp;lt;/td&amp;gt;
            &amp;lt;/tr&amp;gt;
        &amp;lt;/tfoot&amp;gt;
    &amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;tr标签：table row 表行&lt;/li&gt;
&lt;li&gt;th标签：table head 表头标题&lt;/li&gt;
&lt;li&gt;td标签：table data 内容&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;样式&#34;&gt;样式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;table-layout : auto;  自动调节&lt;/li&gt;
&lt;li&gt;border-collapse: collapse; 合并边框&lt;/li&gt;
&lt;li&gt;border-spacing：0; 边框之间的距离&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;form-表单标签&#34;&gt;form 表单标签&lt;/h3&gt;
&lt;p&gt;发get或post请求，然后刷新页面&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    &amp;lt;form action=&amp;quot;/xxx&amp;quot; method=&amp;quot;POST&amp;quot;&amp;gt;
        &amp;lt;input type=&amp;quot;text&amp;quot;&amp;gt;
        &amp;lt;input type=&amp;quot;submit&amp;quot;&amp;gt;
    &amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;属性-2&#34;&gt;属性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;action: 控制请求那个页面&lt;/li&gt;
&lt;li&gt;method: 控制请求方式&lt;/li&gt;
&lt;li&gt;autocomplete：自动填充&lt;/li&gt;
&lt;li&gt;target： 同href&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;input和button&#34;&gt;input和button&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;input 让用户输入，不能加其他&lt;/li&gt;
&lt;li&gt;button 可以加其他（图片）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;input属性type&#34;&gt;input属性type&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;button&lt;/li&gt;
&lt;li&gt;checkbox 多选&lt;/li&gt;
&lt;li&gt;password&lt;/li&gt;
&lt;li&gt;radio 单选&lt;/li&gt;
&lt;li&gt;submit 提交&lt;/li&gt;
&lt;li&gt;text&lt;/li&gt;
&lt;li&gt;file 文件&lt;/li&gt;
&lt;li&gt;hidden&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;其他输入标签textareaselectoption&#34;&gt;其他输入标签textarea、select+option&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;    &amp;lt;select name=&amp;quot;location&amp;quot; id=&amp;quot;1&amp;quot;&amp;gt;
                &amp;lt;option value=&amp;quot;sh&amp;quot;&amp;gt;上海&amp;lt;/option&amp;gt;
                &amp;lt;option value=&amp;quot;bj&amp;quot;&amp;gt;北京&amp;lt;/option&amp;gt;
                &amp;lt;option value=&amp;quot;cd&amp;quot;&amp;gt;成都&amp;lt;/option&amp;gt;
    &amp;lt;/select&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;注意&#34;&gt;注意&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;form 里面的input要有name&lt;/li&gt;
&lt;li&gt;form 要有type=submit才能触发submit事件&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>HTML入门笔记1</title>
      <link>http://localhost:1313/post/fourth/</link>
      <pubDate>Tue, 10 Mar 2020 15:16:07 +0800</pubDate>
      
      <guid>http://localhost:1313/post/fourth/</guid>
      
        <description>&lt;h2 id=&#34;html&#34;&gt;HTML&lt;/h2&gt;
&lt;h3 id=&#34;1html-是谁发明的&#34;&gt;1.HTML 是谁发明的&lt;/h3&gt;
&lt;p&gt;李爵士&lt;/p&gt;
&lt;h3 id=&#34;2html-起手应该写什么&#34;&gt;2.HTML 起手应该写什么&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;    &amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;3常用的表章节的标签有哪些分别是什么意思h1h6sectionarticlemainaside-等等&#34;&gt;3.常用的表章节的标签有哪些，分别是什么意思（h1~h6、section、article、main、aside 等等）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;h1-h6 标题标签&lt;/li&gt;
&lt;li&gt;section 章节标签&lt;/li&gt;
&lt;li&gt;article 文章标签&lt;/li&gt;
&lt;li&gt;main 主要内容&lt;/li&gt;
&lt;li&gt;aside 旁支内容&lt;/li&gt;
&lt;li&gt;p 段落&lt;/li&gt;
&lt;li&gt;header 头部&lt;/li&gt;
&lt;li&gt;footer 脚部&lt;/li&gt;
&lt;li&gt;div 划分&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4全局属性有哪些&#34;&gt;4.全局属性有哪些&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;class&lt;/li&gt;
&lt;li&gt;id&lt;/li&gt;
&lt;li&gt;style&lt;/li&gt;
&lt;li&gt;title&lt;/li&gt;
&lt;li&gt;contenteditable&lt;/li&gt;
&lt;li&gt;hidden&lt;/li&gt;
&lt;li&gt;tabindex&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5常用的内容标签有哪些分别是什么意思astrongemcodepre-等等&#34;&gt;5.常用的内容标签有哪些，分别是什么意思（a、strong、em、code、pre 等等）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ol+li (ordered list, list item 列表中的一项)&lt;/li&gt;
&lt;li&gt;ul+li (unordered list, 同上)&lt;/li&gt;
&lt;li&gt;dl+dt+dd (d:description, list + term + data)&lt;/li&gt;
&lt;li&gt;pre (用于保留空格，换行)&lt;/li&gt;
&lt;li&gt;hr （分割线）&lt;/li&gt;
&lt;li&gt;br （换行）&lt;/li&gt;
&lt;li&gt;a （超链接）&lt;/li&gt;
&lt;li&gt;em （emphasis 强调）&lt;/li&gt;
&lt;li&gt;strong(重要)&lt;/li&gt;
&lt;li&gt;code （默认字体等宽）&lt;/li&gt;
&lt;li&gt;quote(引用)&lt;/li&gt;
&lt;li&gt;blockquote(块级引用)&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>第三篇文章</title>
      <link>http://localhost:1313/post/%E7%AC%AC%E4%B8%89%E7%AF%87%E6%96%87%E7%AB%A0/</link>
      <pubDate>Tue, 10 Mar 2020 13:52:40 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E7%AC%AC%E4%B8%89%E7%AF%87%E6%96%87%E7%AB%A0/</guid>
      
        <description>&lt;h1 id=&#34;如何用-hugo-搭建个人博客&#34;&gt;如何用 hugo 搭建个人博客&lt;/h1&gt;
&lt;h2 id=&#34;mac-用户&#34;&gt;Mac 用户&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;安装hugo&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;brew install hugo
hugo version
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建新的环境&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hugo new site xxx.github.io-creator
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加主题&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd xxx.github.io-creator
git init
xxxxxxxxx //主题下载地址
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置主题名&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo echo &#39;theme = &amp;quot;ananke&amp;quot;&#39; &amp;gt;&amp;gt; config.toml
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;新建文章&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hugo new post/my first page.md
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;写文章，将 &lt;code&gt;draft: true&lt;/code&gt; 改为 ``draft: false`&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行 &lt;code&gt;hugo server -D&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;打开 http://localhost:1313/ ，会看到一个示例网站。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;配置好&lt;code&gt;config.toml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;文章写在&lt;code&gt;./content/post&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行&lt;code&gt;hugo -D&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cd pablic/&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git add .&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git commit -v&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git push&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;说明&#34;&gt;说明&lt;/h2&gt;
&lt;p&gt;具体操作参照hugo官方文档&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>第二篇文章</title>
      <link>http://localhost:1313/post/%E7%AC%AC%E4%BA%8C%E7%AF%87%E6%96%87%E7%AB%A0/</link>
      <pubDate>Tue, 10 Mar 2020 13:33:09 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E7%AC%AC%E4%BA%8C%E7%AF%87%E6%96%87%E7%AB%A0/</guid>
      
        <description>&lt;h1 id=&#34;桃夭-诗经&#34;&gt;《桃夭》 诗经&lt;/h1&gt;
&lt;p&gt;桃之夭夭，灼灼其华。
之子于归，宜其室家。&lt;/p&gt;
&lt;p&gt;桃之夭夭，有蕡其实。
之子于归，宜其家室。&lt;/p&gt;
&lt;p&gt;桃之夭夭，其叶蓁蓁。
之子于归，宜其家人。&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>
